# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

from proto import api_pb2 as proto_dot_api__pb2


class ApiStub(object):
  """service 定义开放调用的服务，即 NotebookService 微服务
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.Index = channel.unary_unary(
        '/api.Api/Index',
        request_serializer=proto_dot_api__pb2.IndexRequest.SerializeToString,
        response_deserializer=proto_dot_api__pb2.IndexResponse.FromString,
        )


class ApiServicer(object):
  """service 定义开放调用的服务，即 NotebookService 微服务
  """

  def Index(self, request, context):
    """rpc 定义服务内的 GetNotebookInfo 远程调用
    方法名  方法参数                 返回值
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_ApiServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'Index': grpc.unary_unary_rpc_method_handler(
          servicer.Index,
          request_deserializer=proto_dot_api__pb2.IndexRequest.FromString,
          response_serializer=proto_dot_api__pb2.IndexResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'api.Api', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
