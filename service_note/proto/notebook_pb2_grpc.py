# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

from proto import notebook_pb2 as proto_dot_notebook__pb2


class NotebookStub(object):
  """service 定义开放调用的服务，即 NotebookService 微服务
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.GetNotebookInfo = channel.unary_unary(
        '/notebook.Notebook/GetNotebookInfo',
        request_serializer=proto_dot_notebook__pb2.NotebookRequest.SerializeToString,
        response_deserializer=proto_dot_notebook__pb2.NotebookResponse.FromString,
        )


class NotebookServicer(object):
  """service 定义开放调用的服务，即 NotebookService 微服务
  """

  def GetNotebookInfo(self, request, context):
    """rpc 定义服务内的 GetNotebookInfo 远程调用
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_NotebookServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'GetNotebookInfo': grpc.unary_unary_rpc_method_handler(
          servicer.GetNotebookInfo,
          request_deserializer=proto_dot_notebook__pb2.NotebookRequest.FromString,
          response_serializer=proto_dot_notebook__pb2.NotebookResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'notebook.Notebook', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
